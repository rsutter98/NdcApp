name: Preview Deployment

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy preview environment'
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/preview

jobs:
  build-preview:
    name: Build Preview App
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore .NET workloads
      run: dotnet workload restore

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --no-restore --configuration Release

    - name: Test Core Library
      run: dotnet test NdcApp.Tests/NdcApp.Tests.csproj --no-build --configuration Release --verbosity normal

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./NdcApp.Preview/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build Docker image for PR
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./NdcApp.Preview/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: build-preview
    if: github.event_name != 'pull_request' && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: preview
      url: http://preview.ndcapp.local:8080
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Update Preview Status Page
      run: |
        # Update PREVIEW_STATUS.md with current deployment info
        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        COMMIT_SHORT=${GITHUB_SHA:0:7}
        BRANCH_NAME=${GITHUB_REF_NAME}
        
        # Replace placeholders in PREVIEW_STATUS.md
        sed -i "s/\*\*Status:\*\* ‚è≥ Warten auf ersten Deployment/**Status:** ‚úÖ Deployment erfolgreich/" PREVIEW_STATUS.md
        sed -i "s/\*\*Letztes Update:\*\* Noch kein Build/**Letztes Update:** $TIMESTAMP/" PREVIEW_STATUS.md
        sed -i "s/\*\*Preview URL:\*\* Noch nicht verf√ºgbar/**Preview URL:** http:\/\/localhost:8080 (lokal) | http:\/\/[IHRE-IP]:8080 (iPhone)/" PREVIEW_STATUS.md
        sed -i "s/\*\*Branch:\*\* Noch kein Build/**Branch:** $BRANCH_NAME/" PREVIEW_STATUS.md
        sed -i "s/\*\*Commit:\*\* -/**Commit:** $COMMIT_SHORT/" PREVIEW_STATUS.md
        sed -i "s/\*\*Build Zeit:\*\* -/**Build Zeit:** $TIMESTAMP/" PREVIEW_STATUS.md
        sed -i "s/\*\*Docker Image:\*\* -/**Docker Image:** ${{ env.REGISTRY }}\/${{ env.IMAGE_NAME }}:$BRANCH_NAME/" PREVIEW_STATUS.md
        sed -i "s/\*\*Container Status:\*\* Noch nicht deployed/**Container Status:** Bereit f√ºr Deployment/" PREVIEW_STATUS.md
        sed -i "s/{{ TIMESTAMP }}/$TIMESTAMP/" PREVIEW_STATUS.md
        
        # Update the web status page
        sed -i "s/{{ TIMESTAMP }}/$TIMESTAMP/" NdcApp.Preview/wwwroot/status.html
      
    - name: Deploy with Docker Compose
      run: |
        echo "üöÄ Preview deployment information:"
        echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "Build time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Commit: ${GITHUB_SHA:0:7}"
        echo "Branch: ${{ github.ref_name }}"
        echo ""
        echo "üì± iPhone/Mobile Setup:"
        echo "1. Auf dem Computer: docker-compose -f docker-compose.preview.yml up -d"
        echo "2. IP-Adresse finden: ipconfig (Windows) oder ifconfig (macOS/Linux)"
        echo "3. iPhone Safari: http://[IHRE-IP]:8080"
        echo "4. Status-Seite: http://[IHRE-IP]:8080/status.html"
        echo ""
        echo "üîó Preview Status Seite verf√ºgbar unter:"
        echo "   - http://localhost:8080/status.html (lokal)"
        echo "   - http://[IHRE-IP]:8080/status.html (iPhone)"
        echo ""
        echo "‚úÖ Preview erfolgreich erstellt und bereit f√ºr Deployment!"
        
    - name: Commit updated status
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add PREVIEW_STATUS.md NdcApp.Preview/wwwroot/status.html
        git diff --staged --quiet || git commit -m "ü§ñ Auto-update preview status after deployment [skip ci]"
        git push

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: build-preview
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const comment = `## üéâ Preview App Built Successfully!

          ### NDC Conference Planner - Web Preview

          The preview version of your MAUI app has been built and is ready for testing!

          ### üì± **NEUER iPhone Setup Guide verf√ºgbar!**
          
          **Live Status Seite:** Nach dem Deployment verf√ºgbar unter \`http://[IHRE-IP]:8080/status.html\`
          
          Diese Seite enth√§lt:
          - ‚úÖ **Schritt-f√ºr-Schritt iPhone Anleitung** mit QR-Code Generator
          - ‚úÖ **Automatisches IP-Erkennung** f√ºr einfacheren Setup
          - ‚úÖ **Interaktive Netzwerk-Tests** zur Diagnose
          - ‚úÖ **Live Deployment Status** mit aktuellen Informationen
          - ‚úÖ **Troubleshooting Guide** f√ºr h√§ufige Probleme

          ### üê≥ Docker Deployment
          The preview app is containerized and ready to deploy. Use the following commands:

          \`\`\`bash
          # Build und Start (optimal f√ºr iPhone Zugang)
          docker-compose -f docker-compose.preview.yml up -d

          # Lokaler Zugang
          open http://localhost:8080
          
          # iPhone Setup Status Seite
          open http://localhost:8080/status.html
          
          # iPhone Zugang:
          # 1. IP-Adresse finden: ipconfig (Windows) / ifconfig (macOS/Linux)
          # 2. iPhone Safari: http://[IHRE-IP]:8080
          # 3. Status & Setup: http://[IHRE-IP]:8080/status.html
          \`\`\`

          ### üì± iPhone Zugang - Vereinfacht
          1. **üîß Computer vorbereiten:** \`docker-compose -f docker-compose.preview.yml up -d\`
          2. **üì± Status Seite √∂ffnen:** \`http://[IP]:8080/status.html\`
          3. **üìã Anleitung folgen:** Interaktive Schritt-f√ºr-Schritt Anleitung
          4. **üì∏ QR Code nutzen:** Automatisch generiert f√ºr schnellen Zugang

          ### üåü Features Available
          - ‚úÖ **Conference talk browsing** - View all available talks
          - ‚úÖ **Personal planning** - Add/remove talks from your plan  
          - ‚úÖ **Talk ratings** - Rate talks with 1-5 stars
          - ‚úÖ **Filtering & search** - Filter by day, category, or search text
          - ‚úÖ **Responsive design** - Works on desktop and mobile
          - ‚úÖ **Real-time updates** - Live statistics and interactions
          - ‚úÖ **NEW: Mobile Setup Guide** - Interactive iPhone setup assistance

          ### üìä Deployment Status
          
          **Live Status:** [PREVIEW_STATUS.md](../PREVIEW_STATUS.md) - Automatisch aktualisiert nach jedem Build  
          **Interactive Guide:** \`http://[IHRE-IP]:8080/status.html\` - Nach Deployment verf√ºgbar

          This web preview replicates the core functionality of your MAUI app for easy demonstration and testing purposes.

          ---
          *Built from commit: ${context.sha.substring(0, 7)}*
          *üì± iPhone Setup Guide: Jetzt verf√ºgbar √ºber Status-Seite*`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });