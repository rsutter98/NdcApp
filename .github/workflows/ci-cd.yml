name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults
        
  build-windows:
    name: Build Windows MSIX
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI workload
      run: dotnet workload install maui
      
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build Windows MSIX
      run: dotnet publish NdcApp/NdcApp.csproj -f net8.0-windows10.0.19041.0 -c Release -p:RuntimeIdentifierOverride=win10-x64 -p:WindowsPackageType=Msix -p:SelfContained=true -p:CI_PLATFORM=windows
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-msix
        path: NdcApp/bin/Release/net8.0-windows10.0.19041.0/win10-x64/publish/
        
  build-android:
    name: Build Android APK
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install MAUI workload
      run: dotnet workload install maui
      
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'microsoft'
        java-version: '11'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build Android APK
      run: dotnet publish NdcApp/NdcApp.csproj -f net8.0-android -c Release -p:AndroidSdkDirectory=$env:ANDROID_SDK_ROOT -p:CI_PLATFORM=android
      
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: NdcApp/bin/Release/net8.0-android/publish/
        
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-android]
    if: github.event_name == 'release'
    
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-msix
        path: ./windows-release
        
    - name: Download Android artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-apk
        path: ./android-release
        
    - name: Create release archive
      run: |
        cd windows-release && zip -r ../NdcApp-Windows-v${{ github.event.release.tag_name }}.zip . && cd ..
        cd android-release && zip -r ../NdcApp-Android-v${{ github.event.release.tag_name }}.zip . && cd ..
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          NdcApp-Windows-v${{ github.event.release.tag_name }}.zip
          NdcApp-Android-v${{ github.event.release.tag_name }}.zip
        body: |
          ## NDC Conference Planner v${{ github.event.release.tag_name }}
          
          ### Platform Support
          - ✅ Windows 10/11 (MSIX Package)
          - ✅ Android 5.0+ (APK)
          
          ### Installation
          **Windows**: Download and install the MSIX package
          **Android**: Enable "Install from unknown sources" and install the APK
          
          ### Rollback Instructions
          **Windows**: Uninstall via Settings > Apps, then install previous version
          **Android**: Uninstall current version and install previous APK
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}