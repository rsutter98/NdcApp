name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'

    - name: Restore .NET workloads
      run: dotnet workload restore

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Solution
      run: dotnet build --no-restore --configuration Release

    - name: Run Tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-test-results
        path: TestResults/*.trx

    - name: Validate Preview Build
      run: |
        echo "üîç Validating Preview Dockerfile structure..."
        
        # Check that Dockerfile exists and has expected structure
        if [ ! -f "./NdcApp.Preview/Dockerfile" ]; then
          echo "‚ùå Dockerfile not found at ./NdcApp.Preview/Dockerfile"
          exit 1
        fi
        
        # Validate Dockerfile has key components
        if ! grep -q "FROM mcr.microsoft.com/dotnet/sdk:8.0" ./NdcApp.Preview/Dockerfile; then
          echo "‚ùå Dockerfile missing .NET SDK base image"
          exit 1
        fi
        
        if ! grep -q "FROM mcr.microsoft.com/dotnet/aspnet:8.0" ./NdcApp.Preview/Dockerfile; then
          echo "‚ùå Dockerfile missing ASP.NET runtime image"
          exit 1
        fi
        
        if ! grep -q "dotnet restore" ./NdcApp.Preview/Dockerfile; then
          echo "‚ùå Dockerfile missing dependency restoration"
          exit 1
        fi
        
        if ! grep -q "dotnet publish" ./NdcApp.Preview/Dockerfile; then
          echo "‚ùå Dockerfile missing publish step"
          exit 1
        fi
        
        echo "‚úÖ Dockerfile structure validation passed"
        echo "‚úÖ Preview app is ready for Docker deployment"
        
        # Note: Actual Docker build is tested in the preview workflow with proper registry access

    - name: PR Validation Summary
      run: |
        echo "## üéâ PR Validation Complete!"
        echo ""
        echo "### ‚úÖ All Checks Passed:"
        echo "- ‚úÖ .NET workloads restored successfully"
        echo "- ‚úÖ Dependencies restored without issues"
        echo "- ‚úÖ Solution builds in Release configuration"
        echo "- ‚úÖ All tests pass (check test results above)"
        echo "- ‚úÖ Preview Dockerfile structure validated"
        echo ""
        echo "### üìã Validation Summary:"
        echo "This PR is ready for review and meets all technical requirements."
        echo ""
        echo "**Next Steps:**"
        echo "1. Code review from maintainers"
        echo "2. All status checks must be green"
        echo "3. Branch protection rules must be satisfied"
        echo ""
        echo "‚ö†Ô∏è  **Important**: This PR can only be merged when all status checks are green."

  # This job will always run and provide a single status check that can be used for branch protection
  pr-status-check:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: validate-pr
    if: always()
    
    steps:
    - name: Check validation results
      run: |
        if [ "${{ needs.validate-pr.result }}" == "success" ]; then
          echo "‚úÖ All PR validations passed"
          exit 0
        else
          echo "‚ùå PR validation failed"
          echo "Result: ${{ needs.validate-pr.result }}"
          exit 1
        fi